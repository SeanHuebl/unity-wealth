// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/seanhuebl/unity-wealth/internal/database"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Quierier is an autogenerated mock type for the Quierier type
type Quierier struct {
	mock.Mock
}

// CreateDeviceInfo provides a mock function with given fields: ctx, arg
func (_m *Quierier) CreateDeviceInfo(ctx context.Context, arg database.CreateDeviceInfoParams) (interface{}, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeviceInfo")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateDeviceInfoParams) (interface{}, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateDeviceInfoParams) interface{}); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateDeviceInfoParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefreshToken provides a mock function with given fields: ctx, arg
func (_m *Quierier) CreateRefreshToken(ctx context.Context, arg database.CreateRefreshTokenParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateRefreshTokenParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, params
func (_m *Quierier) CreateUser(ctx context.Context, params database.CreateUserParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateUserParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceInfoByUser provides a mock function with given fields: ctx, arg
func (_m *Quierier) GetDeviceInfoByUser(ctx context.Context, arg database.GetDeviceInfoByUserParams) (interface{}, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceInfoByUser")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDeviceInfoByUserParams) (interface{}, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDeviceInfoByUserParams) interface{}); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetDeviceInfoByUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *Quierier) GetUserByEmail(ctx context.Context, email string) (database.GetUserByEmailRow, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 database.GetUserByEmailRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (database.GetUserByEmailRow, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) database.GetUserByEmailRow); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(database.GetUserByEmailRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeToken provides a mock function with given fields: ctx, arg
func (_m *Quierier) RevokeToken(ctx context.Context, arg database.RevokeTokenParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.RevokeTokenParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTx provides a mock function with given fields: tx
func (_m *Quierier) WithTx(tx *sql.Tx) *database.Queries {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 *database.Queries
	if rf, ok := ret.Get(0).(func(*sql.Tx) *database.Queries); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Queries)
		}
	}

	return r0
}

// NewQuierier creates a new instance of Quierier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuierier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Quierier {
	mock := &Quierier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
