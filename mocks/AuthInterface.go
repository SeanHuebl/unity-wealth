// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	http "net/http"
	time "time"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AuthInterface is an autogenerated mock type for the AuthInterface type
type AuthInterface struct {
	mock.Mock
}

// CheckPasswordHash provides a mock function with given fields: password, hash
func (_m *AuthInterface) CheckPasswordHash(password string, hash string) error {
	ret := _m.Called(password, hash)

	if len(ret) == 0 {
		panic("no return value specified for CheckPasswordHash")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(password, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAPIKey provides a mock function with given fields: headers
func (_m *AuthInterface) GetAPIKey(headers http.Header) (string, error) {
	ret := _m.Called(headers)

	if len(ret) == 0 {
		panic("no return value specified for GetAPIKey")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(http.Header) (string, error)); ok {
		return rf(headers)
	}
	if rf, ok := ret.Get(0).(func(http.Header) string); ok {
		r0 = rf(headers)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(http.Header) error); ok {
		r1 = rf(headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBearerToken provides a mock function with given fields: headers
func (_m *AuthInterface) GetBearerToken(headers http.Header) (string, error) {
	ret := _m.Called(headers)

	if len(ret) == 0 {
		panic("no return value specified for GetBearerToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(http.Header) (string, error)); ok {
		return rf(headers)
	}
	if rf, ok := ret.Get(0).(func(http.Header) string); ok {
		r0 = rf(headers)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(http.Header) error); ok {
		r1 = rf(headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashPassword provides a mock function with given fields: password
func (_m *AuthInterface) HashPassword(password string) (string, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeJWT provides a mock function with given fields: userID, tokenSecret, expiresIn
func (_m *AuthInterface) MakeJWT(userID uuid.UUID, tokenSecret string, expiresIn time.Duration) (string, error) {
	ret := _m.Called(userID, tokenSecret, expiresIn)

	if len(ret) == 0 {
		panic("no return value specified for MakeJWT")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, time.Duration) (string, error)); ok {
		return rf(userID, tokenSecret, expiresIn)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, time.Duration) string); ok {
		r0 = rf(userID, tokenSecret, expiresIn)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string, time.Duration) error); ok {
		r1 = rf(userID, tokenSecret, expiresIn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeRefreshToken provides a mock function with no fields
func (_m *AuthInterface) MakeRefreshToken() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateJWT provides a mock function with given fields: tokenString, tokenSecret
func (_m *AuthInterface) ValidateJWT(tokenString string, tokenSecret string) (uuid.UUID, error) {
	ret := _m.Called(tokenString, tokenSecret)

	if len(ret) == 0 {
		panic("no return value specified for ValidateJWT")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (uuid.UUID, error)); ok {
		return rf(tokenString, tokenSecret)
	}
	if rf, ok := ret.Get(0).(func(string, string) uuid.UUID); ok {
		r0 = rf(tokenString, tokenSecret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tokenString, tokenSecret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidatePassword provides a mock function with given fields: password
func (_m *AuthInterface) ValidatePassword(password string) error {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthInterface creates a new instance of AuthInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthInterface {
	mock := &AuthInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
