// Code generated by mockery v2.51.1. DO NOT EDIT.

package dbmocks

import (
	context "context"

	database "github.com/seanhuebl/unity-wealth/internal/database"
	mock "github.com/stretchr/testify/mock"
)

// TokenQuerier is an autogenerated mock type for the TokenQuerier type
type TokenQuerier struct {
	mock.Mock
}

// CreateRefreshToken provides a mock function with given fields: ctx, arg
func (_m *TokenQuerier) CreateRefreshToken(ctx context.Context, arg database.CreateRefreshTokenParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateRefreshTokenParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeToken provides a mock function with given fields: ctx, arg
func (_m *TokenQuerier) RevokeToken(ctx context.Context, arg database.RevokeTokenParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.RevokeTokenParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTokenQuerier creates a new instance of TokenQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenQuerier {
	mock := &TokenQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
