// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: device_info.sql

package database

import (
	"context"
)

const createDeviceInfo = `-- name: CreateDeviceInfo :one
INSERT INTO device_info_logs (
        id,
        user_id,
        device_type,
        browser,
        browser_version,
        os,
        os_version
    )
VALUES (
        gen_random_uuid(),
        ?1,
        ?2,
        ?3,
        ?4,
        ?5,
        ?6
    )
RETURNING id
`

type CreateDeviceInfoParams struct {
	UserID         interface{}
	DeviceType     string
	Browser        string
	BrowserVersion string
	Os             string
	OsVersion      string
}

func (q *Queries) CreateDeviceInfo(ctx context.Context, arg CreateDeviceInfoParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, createDeviceInfo,
		arg.UserID,
		arg.DeviceType,
		arg.Browser,
		arg.BrowserVersion,
		arg.Os,
		arg.OsVersion,
	)
	var id interface{}
	err := row.Scan(&id)
	return id, err
}

const getDeviceInfoByUser = `-- name: GetDeviceInfoByUser :one
SELECT id
FROM device_info_logs
WHERE user_id = ?1
    AND device_type = ?2
    AND browser = ?3
    AND browser_version = ?4
    AND os = ?5
    AND os_version = ?6
LIMIT 1
`

type GetDeviceInfoByUserParams struct {
	UserID         interface{}
	DeviceType     string
	Browser        string
	BrowserVersion string
	Os             string
	OsVersion      string
}

func (q *Queries) GetDeviceInfoByUser(ctx context.Context, arg GetDeviceInfoByUserParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getDeviceInfoByUser,
		arg.UserID,
		arg.DeviceType,
		arg.Browser,
		arg.BrowserVersion,
		arg.Os,
		arg.OsVersion,
	)
	var id interface{}
	err := row.Scan(&id)
	return id, err
}
